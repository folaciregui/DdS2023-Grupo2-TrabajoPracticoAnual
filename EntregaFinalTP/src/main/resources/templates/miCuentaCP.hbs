<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <link rel="icon" type="image/x-icon" href="/img/logoUTN.png">
    <link rel="stylesheet" href="/css/miCuenta.css">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@500&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap" rel="stylesheet">
    <title>Mi cuenta</title>
</head>
<body style="margin: 0 ; padding: 0 ; text-align: center ; background-image: url('/img/subte2.jpg') ; background-size: cover">
<header style="background-color: rgba(255,255,255,0.5) ; text-align: left ; display: flex; flex-direction: row">
    <img class="logoUTN" src="/img/logoUTN.png" alt="Imagen en color" style=" text-align: left"></img>
    <div style="align-items: center; flex: 1; text-align: right; margin-top: 20px;">
        <button class="boton" onclick="logout()" style="background-color: #4300d2; color: #ffffff;" onmouseover="this.style.backgroundColor='rgba(255,255,255,0.5)'; this.style.color='#4300d2'" onmouseout="this.style.backgroundColor='#4300d2'; this.style.color='#fff'">Cerrar Sesión</button>
        <a class="botonMenu" href="pagina-principal.html" style="text-decoration: none; background-color: #4300d2; color: #ffffff;" onmouseover="this.style.backgroundColor='rgba(255,255,255,0.5)'; this.style.color='#4300d2'" onmouseout="this.style.backgroundColor='#4300d2'; this.style.color='#fff'">Volver al menu</a>
        <h1 class="titulo">Mi cuenta</h1>
    </div>
</header>

<div class="contenedorColumna" style="background: rgba(255,255,255,0.5)">
<!--    <div class="columna1" style="background: none">-->
<!--&lt;!&ndash;        <div class="contenedorColumna1">&ndash;&gt;-->
<!--&lt;!&ndash;            <a class="referencia" href="cargar-datos-entidades.html">Cargar datos Entidades y Organismos</a>&ndash;&gt;-->
<!--&lt;!&ndash;            <a class="referencia" href="abrir-incidente.html">Abrir Incidente</a>&ndash;&gt;-->
<!--&lt;!&ndash;            <a class="referencia" href="cerrar-incidente.html">Cerrar Incidente</a>&ndash;&gt;-->
<!--&lt;!&ndash;            <a class="referencia" href="consultar-incidente.html">Consultar Incidente</a>&ndash;&gt;-->
<!--&lt;!&ndash;            <a class="referencia" href="sugerencia-incidente.html">Sugerencia Incidente</a>&ndash;&gt;-->
<!--&lt;!&ndash;            <a class="referencia" href="visualizacion-rankings.html">Rankings</a>&ndash;&gt;-->
<!--&lt;!&ndash;            <a class="referenciaElegida" href="mi-cuenta.html">Mi cuenta</a>&ndash;&gt;-->
<!--&lt;!&ndash;        </div>&ndash;&gt;-->
<!--    </div>-->
    <div id= "app" class="columna2" style="background: none; " >
        <div class="miCuenta" style="background: none; margin: 0">
            <img src="/img/usuarioSinFoto.png" alt="Imagen no disponible" width=80px height=80px>
        </div>
        <div id="perfilArea" class="miCuentaContenedor" v-show="!mostrarAreaComunidades" style="background-color: rgba(255,255,255,0.5);">

            <p class="label2" style="margin-bottom: 0">NOMBRE</p>
            <p id="label-nombre" class="label3" style="margin-top: 0" v-if="!estaEditando">{{ nombreOriginal }}</p>
            <input type="text" id="edit-name"  v-if="estaEditando" v-model="nombreNuevo">

            <p class="label2" style="margin-bottom: 0">APELLIDO</p>
            <p id="label-apellido" class="label3" style="margin-top: 0" v-if="!estaEditando">{apellidoOriginal}</p>
            <!--style="display: none"-->
            <input type="text" id="edit-lastname" v-if="estaEditando" v-model="apellidoNuevo" >

            <p class="label2" style="margin-bottom: 0">CORREO ELECTRÓNICO</p>
            <p id="label-correo" class="label3" style="margin-top: 0" v-if="!estaEditando">{correoOriginal}</p>
            <input type="text" id="edit-email"  v-if="estaEditando" v-model="correoNuevo" >

            <p class="label2" style="margin-bottom: 0">CONTRASEÑA</p>
            <p id="label-telefono" class="label3" style="margin-top: 0" v-if="!estaEditando">{contraseñaOriginal}</p>
            <input type="text" id="edit-phonenumber" v-if="estaEditando" v-model="contraseñaNueva" >
        </div>
        <!--        <div class= "areaComunidad" id="comunidadesArea" style="display: none;">-->
        <div class="areaComunidad" id="comunidadesArea" v-show="mostrarAreaComunidades">
            <!-- Contenido de las comunidades -->
            <label class="label">Comunidades:</label>
            <ul>
                <li v-for="membresia in membresias" :key="membresia.id" @click="seleccionarComunidad(membresia)">
                    <span v-text="membresia.comunidad.id" ></span>
                    <span v-text="membresia.rolDeImpacto" ></span>
                    <button id="boton-modificarRol" class="boton" @click="modificarRol(membresia)">Cambiar rol</button>
                </li>

            </ul>

<!--            <div id="areaRoles" v-show="mostrarListaRoles"> &lt;!&ndash; v-show para mostrar/ocultar &ndash;&gt;-->
<!--                <label class="label">Selecciona un rol:</label>-->
<!--                <ul>-->
<!--                    <li v-for="rol in roles" :key="rol" @click="seleccionarRol(rol)">-->
<!--                        <span v-text="rol"></span>-->
<!--                    </li>-->
<!--                </ul>-->
<!--            </div>-->
<!--            <button id="boton-guardarRol" class="boton" @click="guardarRol" v-show="mostrarListaRoles">Guardar Cambios</button>-->
        </div>
        <button id="boton-comunidades" class="boton" @click="mostrarAreaComunidades()" v-show="!mostrarAreaComunidades">Mis comunidades</button>
        <button id="boton-editar" class="boton" @click="editarPerfil()" v-show="mostrarBotonEditar">Editar perfil</button>
        <button id="boton-atras" class="boton" @click="ocultarComunidades" v-show="mostrarAreaComunidades">Atras</button>
        <button id="boton-guardar" class="boton" @click="actualizarPerfil()" v-show="estaEditando">Guardar</button>
        <!--        <button id="boton-atras" class="boton" onclick="ocultarComunidades()" style="display: none">Atras</button>-->
        <!--        <button id="boton-comunidades" class="boton" onclick="verComunidades()">Mis comunidades</button>-->

    </div>
</div>

<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script><!-- para firebase    -->
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-firestore.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2"></script><!-- para vue    -->
<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
<script>
    const firebaseConfig = {
        apiKey: "AIzaSyCqXg0sZXtSOxHPEjkKKS0S4jdHER1z-VU",
        authDomain: "dds-sistema-monitoreables.firebaseapp.com",
        projectId: "dds-sistema-monitoreables",
        storageBucket: "dds-sistema-monitoreables.appspot.com",
        messagingSenderId: "625925036616",
        appId: "1:625925036616:web:8a61a46d81a4c752b9167d"
    };
    firebase.initializeApp(firebaseConfig);
    const user = JSON.parse(localStorage.getItem('user'));
    if(user){
        //console.log("el usuario tiene: "+user);
        // console.log("El usuario tiene: ", JSON.stringify(user, null, 2)); //permite ver toda la info guardada en un despliegue lo eliminariamos
        console.log("nombre usuario: "+user.displayName);
        console.log("correo usuario: "+user.email);
        document.getElementById("label-nombre").textContent = user.displayName || "Nombre no disponible";
        document.getElementById("label-apellido").textContent = user.apellido || "Apellido no disponible";
        document.getElementById("label-correo").textContent = user.email || "Correo no disponible";
        document.getElementById("label-telefono").textContent = user.telefono || "Teléfono no disponible";
        // a partir de aca trabajo el resto de cosas

    }else{
        alert("Sucedio un error por favor vuelva a iniciar sesion");//ver si lo mandamos a index o que hacemos
        console.log("el usuario no existe");
        window.location.href = "pagina-inicio.html";
    }
    function logout() {
        console.log("cerrando");
        firebase.auth().signOut().then(() => {
            localStorage.removeItem('user');
            console.log("El usuario tiene: ", JSON.stringify(user, null, 2)); //permite ver toda la info guardada en un despliegue lo eliminariamos
            console.log(localStorage.getItem('user'));
            window.location.href = "pagina-inicio.html"
        }).catch((error) => {
            alert("Error al cerrar sesión: " + error.message);
        });
    }
</script>
<script>
    new Vue({
        el: '#app',
        data: {
            comunidadSeleccionada: '',
            membresias: [],
            mostrarListaRoles: false,
            mostrarAreaComunidades:false,
            // mostrarBotonGuardarPerfil: false,
            roles: ["OBSERVADOR", "AFECTADO"],
            rolSeleccionado: '',
            nombreNuevo: user.displayName,
            nombreOriginal: user.displayName, //el de firebase
            apellidoOriginal: '', //de donde lo saco
            apellidoNuevo: '',
            contraseñaOriginal:'', // de donde lo saco
            contraseñaNueva:'',
            correoOriginal:user.email,
            correoNuevo: user.email,
            // isNombreModificado: false,
            // isApellidoModificado: false,
            // isCorreoModificado: false,
            // isTelefonoModificado: false,
            estaEditando: false,
            mostrarBotonEditar: true,
        },

        methods: {
            seleccionarComunidad(comunidadId){
                this.comunidadSeleccionada = comunidadId;
            },
            seleccionarRol(rolId){
                this.rolSeleccionado = rolId;
            },
            mostrarAreaComunidades(){
                this.mostrarAreaComunidades = true;
                this.mostrarBotonEditar = false
            },
            modificarRol(membresia) {
                //muestra la lista de roles
                this.mostrarListaRoles = true;
                if(membresia.rolDeImpacto !== "OBSERVADOR"){
                    membresia.rolDeImpacto = "AFECTADO";
                }else {
                    membresia.rolDeImpacto = "OBSERVADOR";
                }
                this.guardarRol(membresia);
            },
            guardarRol(membresia) {
                console.log('Rol nuevo:', membresia.rolDeImpacto);
                //capaz implementar un if para que no se guarde el mismo rol
                // Lógica para actualizar el rol de la comunidad con this.rolSeleccionado
                fetch(`/api/comunidades/${membresia.id}/${membresia.rolDeImpacto}`, {//capaz cambiar esto
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(membresia)
                })
                        .then(response => {
                            if (response.ok) {
                                console.log('Membresia actualizada en la base de datos');
                            } else {
                                console.error('Error al actualizar la membresia en la base de datos (else):', response.status);
                            }
                        })
                        .catch(error => {
                            console.error('Error al actualizar la membresia en la base de datos:', error);
                        });
                // Una vez guardado el rol oculto la lista de roles
                this.mostrarListaRoles = false;
            },
            ocultarComunidades(){
                this.mostrarAreaComunidades = false;
                this.mostrarBotonEditar= true;
            },

            editarPerfil() {
                // Al editar el perfil, activar las variables de modificación según sea necesario
                this.estaEditando = true;
                this.mostrarBotonEditar= false;
            },
            actualizarPerfil(){
                //const usuarioId = 5;
                if (this.nombreOriginal !== this.nombreNuevo) {

                    console.log('Nombre modificado');
                }
                if (this.apellidoOriginal !== this.apellidoNuevo) {

                    console.log('Apellido modificado');
                }
                if (this.correoOriginal !== this.correoNuevo) {

                    console.log('Correo modificado');
                }
                if (this.contraseñaOriginal !== this.contraseñaNueva) {

                    console.log('Contraseña modificada');
                }
                // this.isNombreModificado = false;
                // this.isApellidoModificado = false;
                // this.isCorreoModificado = false;
                // this.isTelefonoModificado = false;
                this.actualizarUsuarioBD();
                this.estaEditando = false;
                this.mostrarBotonEditar = true;
                console.log('toque boton guardar');
            },
            actualizarUsuarioBD(){

                const usuarioModificado = {
                    "id": 5,
                    "nombre": this.nombreNuevo,
                    "apellido": this.apellidoNuevo,
                    "email": this.correoNuevo,
                    "contrasenia": this.contraseñaNueva
                }
                fetch(`/api/usuario/${usuarioModificado.id}`, {//capaz cambiar esto
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(usuarioModificado)
                })
                        .then(response => {
                            if (response.ok) {
                                console.log('Varios datos actualizado en la base de datos');
                            } else {
                                console.error('Error al actualizar Varios datos en la base de datos (else):', response.status);
                            }
                        })
                        .catch(error => {
                            console.error('Error al actualizar Varios datos en la base de datos:', error);
                        });
            },

            // Simplificación del método actualizarPerfil para evitar redundancia
            // actualizarPerfil() {
            //     if(this.isNombreModificado){
            //         this.actualizarDatosBD('nombre', this.nombreNuevo);
            //     }
            //     if(this.isApellidoModificado){
            //         this.actualizarDatosBD('apellido', this.apellidoNuevo);
            //     }
            //     // Lógica similar para correo y teléfono si son editables
            // }
            //
            // actualizarDatosBD(propiedad, valor) {
            //     fetch(`/api/usuario/${valor}`, {
            //         method: 'PUT',
            //         headers: {
            //             'Content-Type': 'application/json'
            //         },
            //         body: JSON.stringify({ [propiedad]: valor })
            //     })
            //             .then(response => {
            //                 if (response.ok) {
            //                     console.log(`${propiedad} actualizado en la base de datos`);
            //                 } else {
            //                     console.error(`Error al actualizar ${propiedad} en la base de datos (else):`, response.status);
            //                 }
            //             })
            //             .catch(error => {
            //                 console.error(`Error al actualizar ${propiedad} en la base de datos:`, error);
            //             });
            // }
        },
        mounted(){
            // Mostrar el rol actual al cargar la página
            const usuarioId = 5; //OBTENER EL ID REAL
            fetch(`/api/obtenerComunidadesPorUsuario/${usuarioId}`)//ya hay un get parecido en CL
                    .then(response => {
                        if (response.status >= 400) {
                            alert("Hubo un error en el API")
                        } else {
                            return response.json()
                        }
                    })
                    .then(membresias => {
                        console.log(membresias); // Verificar en la consola
                        this.membresias = membresias;

                    })
                    .catch(error => {
                        console.error('Error en la solicitud de las comunidades:', error);
                        alert(`Hubo un error en la solicitud al buscar las comunidades:\n\n${error.message}`);
                    });

            // const rolActualElement = document.getElementById('rolActual');
            //  rolActualElement.textContent = `Rol actual: ${this.rolesPorComunidad[this.comunidadSeleccionada]}`;
        }
    });

</script>
</body>
</html>